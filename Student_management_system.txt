import java.util.HashMap;
import java.util.Scanner;

public class StudentManagementSystem {

    // A simple class to represent a Student
    static class Student {
        int id;          // Unique ID of the student
        String name;     // Student's name
        String grade;    // Student's grade

        // Constructor to initialize student details
        public Student(int id, String name, String grade) {
            this.id = id;
            this.name = name;
            this.grade = grade;
        }

        // Display student details
        @Override
        public String toString() {
            return "ID: " + id + ", Name: " + name + ", Grade: " + grade;
        }
    }

    // Storage: HashMap to store student records with ID as the key
    private static HashMap<Integer, Student> studentRecords = new HashMap<>();

    // Scanner for user input
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        while (true) {
            // Display menu options
            System.out.println("\n==== Student Management System ====");
            System.out.println("1. Add Student");
            System.out.println("2. Update Student");
            System.out.println("3. Remove Student");
            System.out.println("4. View Student");
            System.out.println("5. View All Students");
            System.out.println("6. Exit");
            System.out.print("Choose an option: ");

            // User's choice
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            // Call the appropriate method based on user input
            switch (choice) {
                case 1:
                    addStudent();
                    break;
                case 2:
                    updateStudent();
                    break;
                case 3:
                    removeStudent();
                    break;
                case 4:
                    viewStudent();
                    break;
                case 5:
                    viewAllStudents();
                    break;
                case 6:
                    System.out.println("Exiting... Goodbye!");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }

    // Method to add a new student
    private static void addStudent() {
        System.out.print("Enter Student ID: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        // Check if the ID already exists
        if (studentRecords.containsKey(id)) {
            System.out.println("Student ID already exists! Try updating instead.");
            return;
        }

        // Collect student details
        System.out.print("Enter Student Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Student Grade: ");
        String grade = scanner.nextLine();

        // Add the student to the HashMap
        studentRecords.put(id, new Student(id, name, grade));
        System.out.println("Student added successfully.");
    }

    // Method to update an existing student
    private static void updateStudent() {
        System.out.print("Enter Student ID to Update: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        // Check if the student exists
        if (!studentRecords.containsKey(id)) {
            System.out.println("Student ID not found!");
            return;
        }

        // Collect updated details
        System.out.print("Enter New Name: ");
        String newName = scanner.nextLine();
        System.out.print("Enter New Grade: ");
        String newGrade = scanner.nextLine();

        // Update student details
        studentRecords.put(id, new Student(id, newName, newGrade));
        System.out.println("Student updated successfully.");
    }

    // Method to remove a student
    private static void removeStudent() {
        System.out.print("Enter Student ID to Remove: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        // Remove student if the ID exists
        if (studentRecords.remove(id) != null) {
            System.out.println("Student removed successfully.");
        } else {
            System.out.println("Student ID not found!");
        }
    }

    // Method to view details of a single student
    private static void viewStudent() {
        System.out.print("Enter Student ID to View: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        // Fetch and display student details
        Student student = studentRecords.get(id);
        if (student != null) {
            System.out.println(student);
        } else {
            System.out.println("Student ID not found!");
        }
    }

    // Method to view all students
    private static void viewAllStudents() {
        // Check if the records are empty
        if (studentRecords.isEmpty()) {
            System.out.println("No student records found.");
        } else {
            // Print details of all students
            System.out.println("List of Students:");
            for (Student student : studentRecords.values()) {
                System.out.println(student);
            }
        }
    }
}
